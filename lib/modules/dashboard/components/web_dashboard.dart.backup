import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../../config/app_text.dart';
import '../../../widgets/shimmer_animation.dart';
import '../dashboard_controller.dart';
import '../models/dashboard_stats.dart';
import '../widgets/dashboard_stat_card.dart';
import '../widgets/dashboard_pie_chart.dart';
import '../widgets/dashboard_bar_chart.dart';

class TabletDashboard extends GetView<DashboardController> {
  const TabletDashboard({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: context.theme.colorScheme.surfaceContainerLowest,
      appBar: _buildTabletAppBar(context),
      body: controller.obx(
        (DashboardStats? stats) => _buildTabletContent(context, stats!),
        onLoading: _buildTabletShimmerLoading(context),
        onError: (String? error) => _buildTabletErrorState(context, error),
        onEmpty: _buildTabletEmptyState(context),
      ),
    );
  }

  PreferredSizeWidget _buildTabletAppBar(BuildContext context) {
    return AppBar(
      title: AppText.semiBold(
        'Analytics Dashboard',
        color: Colors.white,
        size: 22,
      ),
      backgroundColor: Colors.transparent,
      elevation: 0,
      flexibleSpace: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Color(0xFF667eea),
              Color(0xFF764ba2),
              Color(0xFFf093fb),
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
      ),
      actions: [
        IconButton(
          onPressed: () => controller.refreshData(),
          icon: const Icon(Icons.refresh, color: Colors.white),
          tooltip: 'Refresh Data',
        ),
        const SizedBox(width: 8),
      ],
    );
  }

  Widget _buildTabletContent(BuildContext context, DashboardStats stats) {
    return RefreshIndicator(
      onRefresh: () => controller.refreshData(),
      color: context.theme.colorScheme.primary,
      backgroundColor: context.theme.colorScheme.surface,
      strokeWidth: 3,
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Stats Grid - 3 columns for tablet
            _buildTabletStatsGrid(context, stats),
            
            const SizedBox(height: 32),
            
            // Charts Section - Side by side for tablet
            _buildTabletChartsSection(context, stats),
            
            const SizedBox(height: 32),
            
            // Additional insights
            _buildTabletInsightsSection(context, stats),
          ],
        ),
      ),
    );
  }

  Widget _buildTabletStatsGrid(BuildContext context, DashboardStats stats) {
    return GridView.count(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisCount: 3,
      crossAxisSpacing: 20,
      mainAxisSpacing: 20,
      childAspectRatio: 1.4,
      children: [
        DashboardStatCard(
          title: 'Total Recipes',
          value: stats.totalRecipes.toString(),
          icon: Icons.restaurant_menu_rounded,
          gradient: const LinearGradient(
            colors: [Color(0xFF667eea), Color(0xFF764ba2)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          semanticLabel: 'Total recipes: ${stats.totalRecipes}',
        ),
        DashboardStatCard(
          title: 'Total Ingredients',
          value: stats.totalIngredients.toString(),
          icon: Icons.eco_rounded,
          gradient: const LinearGradient(
            colors: [Color(0xFF11998e), Color(0xFF38ef7d)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          semanticLabel: 'Total ingredients: ${stats.totalIngredients}',
        ),
        DashboardStatCard(
          title: 'Meal Plans',
          value: stats.totalMealPlans.toString(),
          icon: Icons.calendar_today_rounded,
          gradient: const LinearGradient(
            colors: [Color(0xFFf093fb), Color(0xFFf5576c)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          semanticLabel: 'Total meal plans: ${stats.totalMealPlans}',
        ),
      ],
    );
  }

  Widget _buildTabletChartsSection(BuildContext context, DashboardStats stats) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Pie Chart
        Expanded(
          flex: 2,
          child: Container(
            height: 350,
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: context.theme.colorScheme.surface,
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 10,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                AppText.semiBold(
                  'Recipe Distribution',
                  color: context.theme.colorScheme.onSurface,
                  size: 18,
                ),
                const SizedBox(height: 16),
                Expanded(
                  child: DashboardPieChart(stats: stats),
                ),
              ],
            ),
          ),
        ),
        
        const SizedBox(width: 20),
        
        // Bar Chart
        Expanded(
          flex: 3,
          child: Container(
            height: 350,
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: context.theme.colorScheme.surface,
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 10,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                AppText.semiBold(
                  'Monthly Trends',
                  color: context.theme.colorScheme.onSurface,
                  size: 18,
                ),
                const SizedBox(height: 16),
                Expanded(
                  child: DashboardBarChart(stats: stats),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTabletInsightsSection(BuildContext context, DashboardStats stats) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: context.theme.colorScheme.surface,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          AppText.semiBold(
            'Quick Insights',
            color: context.theme.colorScheme.onSurface,
            size: 18,
          ),
          const SizedBox(height: 16),
          
          Row(
            children: [
              Expanded(
                child: _buildInsightCard(
                  context: context,
                  title: 'Most Popular Cuisine',
                  value: 'Italian',
                  icon: Icons.public,
                  color: Colors.orange,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: _buildInsightCard(
                  context: context,
                  title: 'Average Recipe Rating',
                  value: '4.5/5',
                  icon: Icons.star,
                  color: Colors.amber,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: _buildInsightCard(
                  context: context,
                  title: 'New This Month',
                  value: '${stats.totalRecipes ~/ 4}',
                  icon: Icons.add_circle,
                  color: Colors.green,
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildInsightCard({
    required BuildContext context,
    required String title,
    required String value,
    required IconData icon,
    required Color color,
  }) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 8),
          AppText.semiBold(
            value,
            color: context.theme.colorScheme.onSurface,
            size: 20,
          ),
          const SizedBox(height: 4),
          AppText(
            title,
            color: context.theme.colorScheme.onSurface.withOpacity(0.7),
            size: 12,
          ),
        ],
      ),
    );
  }

  Widget _buildTabletShimmerLoading(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24.0),
      child: Column(
        children: [
          // Stats shimmer
          GridView.count(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            crossAxisCount: 3,
            crossAxisSpacing: 20,
            mainAxisSpacing: 20,
            childAspectRatio: 1.4,
            children: List.generate(
              3,
              (index) => ShimmerAnimation(
                width: 200,
                height: 150,
                borderRadius: 16,
              ),
            ),
          ),
          
          const SizedBox(height: 32),
          
          // Charts shimmer
          Row(
            children: [
              Expanded(
                flex: 2,
                child: ShimmerAnimation(
                  width: double.infinity,
                  height: 350,
                  borderRadius: 16,
                ),
              ),
              const SizedBox(width: 20),
              Expanded(
                flex: 3,
                child: ShimmerAnimation(
                  width: double.infinity,
                  height: 350,
                  borderRadius: 16,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 32),
          
          // Insights shimmer
          ShimmerAnimation(
            width: double.infinity,
            height: 120,
            borderRadius: 16,
          ),
        ],
      ),
    );
  }

  Widget _buildTabletErrorState(BuildContext context, String? error) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              color: context.theme.colorScheme.error,
              size: 80,
            ),
            const SizedBox(height: 24),
            AppText.semiBold(
              'Error Loading Dashboard',
              color: context.theme.colorScheme.onSurface,
              size: 24,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 12),
            AppText(
              error ?? 'Something went wrong',
              color: context.theme.colorScheme.onSurface.withOpacity(0.7),
              size: 16,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 32),
            ElevatedButton.icon(
              onPressed: () => controller.refreshData(),
              icon: const Icon(Icons.refresh),
              label: const Text('Retry'),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTabletEmptyState(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.analytics_outlined,
              color: context.theme.colorScheme.onSurface.withOpacity(0.5),
              size: 80,
            ),
            const SizedBox(height: 24),
            AppText.semiBold(
              'No Data Available',
              color: context.theme.colorScheme.onSurface,
              size: 24,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 12),
            AppText(
              'Dashboard data will appear here when available',
              color: context.theme.colorScheme.onSurface.withOpacity(0.7),
              size: 16,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 32),
            ElevatedButton.icon(
              onPressed: () => controller.refreshData(),
              icon: const Icon(Icons.refresh),
              label: const Text('Refresh'),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
